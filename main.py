from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text

from forms import StartGame, JoinGame, RemoveGame, Professionals
from functions import validate_token
from kb import *
from session import create_session, join_session, check_user_active_game, get_session_players, exit_from_session, \
    remove_session, get_session_by_admin, get_user_data, load_json, dump_json
from game_processing import *
from professional import PROFESSIONALS_LIST_EN, PROFESSIONALS_LIST_RU

from bt import TOKEN

storage = MemoryStorage()

bot = Bot(TOKEN)
dp = Dispatcher(bot, storage=storage)


@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CashFlow bot, —É–∫–∞–∂–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=kb_start)


@dp.message_handler(state=StartGame.start)
async def create_game(message: types.Message, state: FSMContext):
    if message.text == "0":
        await state.finish()
        return

    if validate_token(message.text.lower()):

        session_answer = create_session(message.from_user.id, message.text.lower())
        if not session_answer:
            await message.answer("–°–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω, —á—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π",
                                 reply_markup=kb_start_game)
            await state.finish()
            return
        await message.answer(session_answer)
        return
    await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π")
    return


@dp.message_handler(state=JoinGame.token)
async def join_game(message: types.Message, state: FSMContext):
    if message.text == "0":
        await state.finish()
        return

    if validate_token(message.text.lower()):
        session_answer = join_session(message.text.lower(), message.from_user.id)

        if not session_answer:
            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∏–≥—Ä—É, –æ–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞", reply_markup=kb_exit_game)

            for u in get_session_players(message.text.lower()):
                if u != str(message.from_user.id):
                    await bot.send_message(u, f"–ò–≥—Ä–æ–∫ {message.from_user.username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ")
            await state.finish()
            return

        await message.answer(session_answer)
    return


@dp.message_handler(state=RemoveGame.token)
async def remove_game(message: types.Message, state: FSMContext):
    if message.text == "0":
        await state.finish()
        return

    if validate_token(message.text.lower()):
        status, session_users = remove_session(message.text.lower(), message.from_user.id)

        if session_users:
            await state.finish()

        for i in session_users:
            await bot.send_message(i, "–ò–≥—Ä–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞, –≤—ã –±—ã–ª–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb_start)
    return


@dp.callback_query_handler(Text(startswith="prof="))
async def set_user_professional(callback: types.CallbackQuery):
    data = load_json()

    session = callback.data.split(";")[1]
    user_id = callback.data.split(";")[2]

    data[session]["users"][user_id] = PROFESSIONALS_LIST_EN[
        PROFESSIONALS_LIST_RU.index(callback.data.split(";")[0].split("=")[1])]

    dump_json(data)

    await bot.delete_message(callback.message.chat.id, callback.message.message_id)

    msg = await bot.send_message(callback.message.chat.id, "–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ")

    balance = set_balance(callback.data.split(";")[1], callback.from_user.id, msg["message_id"])

    await bot.edit_message_text(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}", callback.message.chat.id, msg["message_id"])
    # await bot.pin_chat_message(callback.message.chat.id, msg["message_id"], disable_notification=False)

    kb_game_menu = InlineKeyboardMarkup(row_width=3)
    kb_game_menu.insert(InlineKeyboardButton("‚ú¥Ô∏è –¥–µ–Ω—å –≤—ã–ø–ª–∞—Ç ‚ú¥Ô∏è", callback_data=f"#pd;{user_id}"))
    kb_game_menu.row(InlineKeyboardButton("üÜò –≤—Å—è–∫–∞—è –≤—Å—è—á–∏–Ω–∞ üÜò", callback_data=f"#vv;{user_id}"))
    kb_game_menu.insert(InlineKeyboardButton("‚úÖ —Å–¥–µ–ª–∫–∞ ‚úÖ", callback_data=f"#dl;{user_id}"))
    kb_game_menu.insert(InlineKeyboardButton("üåê —Ä—ã–Ω–æ–∫ üåê", callback_data=f"#mk;{user_id}"))
    kb_game_menu.insert(InlineKeyboardButton("üö∫ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å üö∫", callback_data=f"#ct;{user_id}"))
    kb_game_menu.insert(InlineKeyboardButton("üöπ —Ä–µ–±–µ–Ω–æ–∫ üöπ", callback_data=f"#cl;{user_id}"))
    kb_game_menu.insert(InlineKeyboardButton("üõÇ —É–≤–æ–ª—å–Ω–µ–Ω–∏–µ üõÇ", callback_data=f"#dm;{user_id}"))

    card = generate_user_card(session, user_id)
    main_message = await bot.send_message(callback.message.chat.id, card,
                                          reply_markup=kb_game_menu)
    main_message_id = main_message["message_id"]

    set_main_message(session, user_id, main_message_id)

    # print(callback.data)
    # print(user_id, session_name, user_id)
    # print(user_professional)

    # user = get_user_data("amogus", user_id)
    pass


@dp.message_handler()
async def all_message(message: types.Message):
    if message.text == "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ":
        status = check_user_active_game(message.from_user.id)
        if status:
            await message.answer(status)
            return
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏–≥—Ä—ã –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        await JoinGame.token.set()
    if message.text == "–°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É":
        status = check_user_active_game(message.from_user.id)
        if status:
            await message.answer(status)
            return
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –∏–≥—Ä–æ–∫–∏ —Å–º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ "
                             "(—Ç–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –Ω–µ –º–µ–Ω–µ–µ —á–µ–º –∏–∑ 6 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ç–æ–ª—å–∫–æ –∏–∑ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±—É–∫–≤)"
                             " –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        await StartGame.start.set()
    if message.text == "–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã":
        answer = exit_from_session(message.from_user.id)
        await message.answer(answer[0], reply_markup=kb_start)
        if answer[1]:
            for i in get_session_players(answer[1]):
                await bot.send_message(i, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã",
                                       reply_markup=kb_start)
    if message.text == "–£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏–≥—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ 0 –¥–ª—è –æ—Ç–º–µ–Ω—ã")
        await RemoveGame.token.set()
    if message.text == "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É":
        if session := get_session_by_admin(message.from_user.id):
            # print(session)
            if session["metadata"]["game_player_count"] < 2:
                await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤")
                return

            start_game()

            for i in session["users"]:
                print(session)
                kb_professional = InlineKeyboardMarkup(resize_keyboard=True)

                print(i)
                for k in PROFESSIONALS_LIST_RU:
                    print(k)
                    kb_professional.add(
                        InlineKeyboardButton(k, callback_data=f"prof={k};{session['metadata']['session_name']};{i}")
                    )
                await bot.send_message(i, "–ù–∞—á–∞–ª–æ –∏–≥—Ä—ã, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏—é", reply_markup=kb_professional)
                await Professionals.prof.set()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
